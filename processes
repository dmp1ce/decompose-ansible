#!/bin/bash

# Include common processes
# shellcheck disable=SC1090
source "$(_decompose-project-root)"/.decompose/environment/lib/common/processes

# Declare processes
# shellcheck disable=SC2034
DECOMPOSE_PROCESSES=( 'ansible' 'run-playbook' 'encrypt-string' 'decrypt-string'
  'create-encrypted-file' 'edit-encrypted-file' 'decrypt-file'
  'view-encrypted-file' 'encrypt-file' 'get-requirements'
  "${DECOMPOSE_COMMON_PROCESSES[@]}" )

_decompose-process-get-requirements() {
  __check_requirements || exit 1
  ansible-galaxy install -r "$(_decompose-project-root)/requirements.yml"
}
_decompose-process-get-requirements_help() {
    echo "  Get requirements from Ansible Galaxy"
}

_decompose-process-run-playbook() {
  __check_requirements || exit 1
  local inventory; inventory="$1"
  if [ ! -f "$inventory" ]; then
    echo "Please specify an inventory file for the first parameter."
    _decompose-process-run-playbook_help
    exit 1
  fi

  local playbook; playbook="$2"
  if [ ! -f "$playbook" ]; then
    echo "Please specify a playbook file for the second parameter."
    _decompose-process-run-playbook_help
    exit 1
  fi

  local host_pattern; host_pattern="$3"
  if [ -z "$host_pattern" ]; then
    echo "Please supply a host pattern for the second parameter."
    echo -n "Valid hosts are:"
    ansible-playbook --vault-password-file="$VAULT_PASS_FILE" "$playbook" -i "$(_decompose-project-root)/$inventory" \
      --list-hosts
    echo "Also see 'http://docs.ansible.com/ansible/intro_patterns.html'"
    exit 1
  fi

  local additional_params; additional_params=("${@:4}")
  ansible-playbook --vault-password-file="$VAULT_PASS_FILE" "$playbook" -i "$(_decompose-project-root)/$inventory" \
    --limit="$host_pattern" "${additional_params[@]}"
}
_decompose-process-run-playbook_help() {
  echo "  Run specified playbook."
  echo "    Param 1: inventory file"
  echo "    Param 2: playbook file"
  echo "    Param 3: host pattern"
  echo "    Param 4+: passed to 'ansible-playbook' command"
}

_decompose-process-ansible() {
  __check_requirements || exit 1
  local inventory; inventory="$1"
  if [ ! -f "$inventory" ]; then
    echo "Please specify an inventory file for the first parameter."
    _decompose-process-ansible_help
    exit 1
  fi

  local host_pattern; host_pattern="$2"
  if [ -z "$host_pattern" ]; then
    echo "Please supply a host pattern for the second parameter."
    echo -n "Valid hosts are:"
    ansible --vault-password-file="$VAULT_PASS_FILE" -i "$inventory" "" --list-hosts
    echo "Also see 'http://docs.ansible.com/ansible/intro_patterns.html'"
    exit 1
  fi

  local additional_params; additional_params=("${@:2}")
  ansible --vault-password-file="$VAULT_PASS_FILE" -i "$inventory" "${additional_params[@]}"
}
_decompose-process-ansible_help() {
  echo "  Run ansible. All parameters are passed to 'ansible' command."
  echo "    Param 1: inventory filename"
  echo "    Param 2: host pattern"
  echo "    Param 3+: passed to 'ansible' command"
  echo ""
  echo "    EX: 'decompose ansible staging host1 -m ping'"
}

_decompose-process-encrypt-string() {
  __check_requirements || exit 1
  local s; s="$1"
  if [ -z "$s" ]; then
    echo "Please specify a string for encryption."
    _decompose-process-encrypt-string_help
    exit 1
  fi

  local additional_params; additional_params=("${@:2}")
  ansible-vault --vault-password-file="$VAULT_PASS_FILE" encrypt_string "$1" "${additional_params[@]}"
}
_decompose-process-encrypt-string_help() {
  echo "  Encrypt a string for use in variable file"
  echo "    EX: 'decompose encrypt-string password'"
}

_decompose-process-decrypt-string() {
  __check_requirements || exit 1
  local additional_params; additional_params=("${@:1}")

  echo "Please enter ciphertext string to decrypt:"

  cipher=$(cat)
  cipher_head=$(echo "$cipher" | head -n 1)
  cipher_head_trimmed=$(echo "$cipher_head" | sed 's/^ *//;s/ *$//')
  cipher_body=$(echo "$cipher" | tail -n +2)
  cipher_body_trimmed=$(while read -r line; do
    echo -n "$line" | sed 's/^ *//;s/ *$//'
  done <<< "$cipher_body")

  t=$(mktemp)
  echo -e "$cipher_head_trimmed\\n$cipher_body_trimmed" > "$t"

  echo ""
  ansible-vault --vault-password-file="$VAULT_PASS_FILE" decrypt "$t" --output=/dev/stderr "${additional_params[@]}" > /dev/null
  echo ""
}
_decompose-process-decrypt-string_help() {
  echo "  Decrypt a string for used in variable file"
  echo "    EX: 'decompose decrypt-string'"
}

_decompose-process-ansible-vault-file() {
  __check_requirements || exit 1
  local c; c="$1"
  if [ -z "$c" ]; then
    echo "Missing command for ansible-vault"
    return 1
  fi

  local f; f="$2"
	if [ -z "$f" ]; then
    echo "Please specify a file to create for the first parameter."
    return 1
  fi

  local additional_params; additional_params=("${@:3}")

  case "$c" in
    "create" | "edit" | "encrypt" | "decrypt" | "view")
      ansible-vault --vault-password-file="$VAULT_PASS_FILE" "$c" "$f" "${additional_params[@]}"
      ;;
    *)
      echo "$c is not a valid command"
      return 1
      ;;
  esac
}

_decompose-process-create-encrypted-file() {
  if ! _decompose-process-ansible-vault-file create "$@"
  then
    _decompose-process-create-encrypted-file_help
  fi
}
_decompose-process-create-encrypted-file_help() {
  echo "  Create encrypt variable file"
  echo "    Param 1: File path"
  echo "    Param 2+: passed to 'ansible-vault' command"
}
_decompose-process-edit-encrypted-file() {
  if ! _decompose-process-ansible-vault-file edit "$@"
  then
    _decompose-process-edit-encrypted-file_help
  fi
}
_decompose-process-edit-encrypted-file_help() {
  echo "  Edit encrypted file"
  echo "    Param 1: File path"
  echo "    Param 2+: passed to 'ansible-vault' command"
}
_decompose-process-encrypt-file() {
  if ! _decompose-process-ansible-vault-file encrypt "$@"
  then
    _decompose-process-encrypt-encrypted-file_help
  fi
}
_decompose-process-encrypt-file_help() {
  echo "  Encrypt unencrypted file"
  echo "    Param 1: File path"
  echo "    Param 2+: passed to 'ansible-vault' command"
}
_decompose-process-decrypt-file() {
  if ! _decompose-process-ansible-vault-file decrypt "$@"
  then
    _decompose-process-decrypt-file_help
  fi
}
_decompose-process-decrypt-file_help() {
  echo "  Decrypt encrypted file"
  echo "    Param 1: File path"
  echo "    Param 2+: passed to 'ansible-vault' command"
}
_decompose-process-view-encrypted-file() {
  if ! _decompose-process-ansible-vault-file view "$@"
  then
    _decompose-process-view-encrypted-file_help
  fi
}
_decompose-process-view-encrypted-file_help() {
  echo "  View encrypted values in encrypted file"
  echo "    Param 1: File path"
  echo "    Param 2+: passed to 'ansible-vault' command"
}

#_decompose-process-edit-encrypted-file() {
#  local f; f="$1"
#	if [ ! -f "$f" ]; then
#    echo "Please specify a file to create for the first parameter."
#    _decompose-process-create-encrypted-file_help
#    exit 1
#  fi
#  local additional_params; additional_params=(${@:2})
#
#  ansible-vault --vault-password-file="$VAULT_PASS_FILE" create "$f" "${additional_params[@]}"
#}

__check_requirements() {
  local return_code
  local checks=('ansible' 'ansible-playbook' 'ansible-vault' 'ansible-galaxy')

  local check; for check in "${checks[@]}"; do
  command -v "$check" >/dev/null 2>&1 || {
      echo "'$check' command is missing"
      return_code=1
    }
  done

  return $return_code
}

# vim:syntax=sh
